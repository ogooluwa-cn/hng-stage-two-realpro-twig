"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dateFilterSynchronously = exports.date = void 0;
const luxon_1 = require("luxon");
const format_duration_1 = require("../../../helpers/format-duration");
const format_date_time_1 = require("../../../helpers/format-date-time");
const date_1 = require("../functions/date");
/**
 * Converts a date to the given format.
 *
 * <pre>
 *   {{ post.published_at|date("m/d/Y") }}
 * </pre>
 *
 * @param executionContext
 * @param date A date
 * @param format The target format, null to use the default
 * @param timezone The target timezone, null to use the default, false to leave unchanged
 *
 * @return {Promise<string>} The formatted date
 */
const date = (executionContext, date, format, timezone) => {
    const { environment } = executionContext;
    const { dateFormat, dateIntervalFormat } = environment;
    return (0, date_1.date)(executionContext, date, timezone)
        .then((date) => {
        if (date instanceof luxon_1.Duration) {
            if (format === null) {
                format = dateIntervalFormat;
            }
            return Promise.resolve((0, format_duration_1.formatDuration)(date, format));
        }
        if (format === null) {
            format = dateFormat;
        }
        return Promise.resolve((0, format_date_time_1.formatDateTime)(date, format));
    });
};
exports.date = date;
const dateFilterSynchronously = (executionContext, date, format, timezone) => {
    const { environment } = executionContext;
    const { dateFormat, dateIntervalFormat } = environment;
    const durationOrDateTime = (0, date_1.dateSynchronously)(executionContext, date, timezone);
    if (durationOrDateTime instanceof luxon_1.Duration) {
        if (format === null) {
            format = dateIntervalFormat;
        }
        return (0, format_duration_1.formatDuration)(durationOrDateTime, format);
    }
    if (format === null) {
        format = dateFormat;
    }
    return (0, format_date_time_1.formatDateTime)(durationOrDateTime, format);
};
exports.dateFilterSynchronously = dateFilterSynchronously;
