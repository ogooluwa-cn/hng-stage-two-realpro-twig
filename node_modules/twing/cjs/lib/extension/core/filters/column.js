"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.columnSynchronously = exports.column = void 0;
const is_traversable_1 = require("../../../helpers/is-traversable");
const iterator_to_map_1 = require("../../../helpers/iterator-to-map");
const is_plain_object_1 = require("../../../helpers/is-plain-object");
/**
 * Return the values from a single column in the input array.
 *
 * @param {*} thing An iterable
 * @param {*} columnKey The column key
 *
 * @return {Promise<Array<any>>} The array of values
 */
const column = (_executionContext, thing, columnKey) => {
    let map;
    if (!(0, is_traversable_1.isTraversable)(thing) || (0, is_plain_object_1.isPlainObject)(thing)) {
        return Promise.reject(new Error(`The column filter only works with arrays or "Traversable", got "${typeof thing}" as first argument.`));
    }
    else {
        map = (0, iterator_to_map_1.iteratorToMap)(thing);
    }
    const result = [];
    for (const value of map.values()) {
        const valueAsMap = (0, iterator_to_map_1.iteratorToMap)(value);
        for (const [key, value] of valueAsMap) {
            if (key === columnKey) {
                result.push(value);
            }
        }
    }
    return Promise.resolve(result);
};
exports.column = column;
const columnSynchronously = (_executionContext, thing, columnKey) => {
    let map;
    if (!(0, is_traversable_1.isTraversable)(thing) || (0, is_plain_object_1.isPlainObject)(thing)) {
        throw new Error(`The column filter only works with arrays or "Traversable", got "${typeof thing}" as first argument.`);
    }
    else {
        map = (0, iterator_to_map_1.iteratorToMap)(thing);
    }
    const result = [];
    for (const value of map.values()) {
        const valueAsMap = (0, iterator_to_map_1.iteratorToMap)(value);
        for (const [key, value] of valueAsMap) {
            if (key === columnKey) {
                result.push(value);
            }
        }
    }
    return result;
};
exports.columnSynchronously = columnSynchronously;
