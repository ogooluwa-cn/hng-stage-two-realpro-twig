"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.joinSynchronously = exports.join = void 0;
const is_traversable_1 = require("../../../helpers/is-traversable");
const iterator_to_array_1 = require("../../../helpers/iterator-to-array");
/**
 * Joins the values to a string.
 *
 * The separator between elements is an empty string per default, you can define it with the optional parameter.
 *
 * <pre>
 *  {{ [1, 2, 3]|join('|') }}
 *  {# returns 1|2|3 #}
 *
 *  {{ [1, 2, 3]|join }}
 *  {# returns 123 #}
 * </pre>
 *
 * @param _executionContext
 * @param value A value
 * @param glue The separator
 * @param and The separator for the last pair
 *
 * @returns {Promise<string>} The concatenated string
 */
const join = (_executionContext, value, glue, and) => {
    const _do = () => {
        if ((value == null) || (value === undefined)) {
            return '';
        }
        if ((0, is_traversable_1.isTraversable)(value)) {
            value = (0, iterator_to_array_1.iteratorToArray)(value);
            // this is ugly, but we have to ensure that each element of the array is rendered as PHP would render it
            const safeValue = value.map((item) => {
                if (typeof item === 'boolean') {
                    return (item === true) ? '1' : '';
                }
                if (Array.isArray(item)) {
                    return 'Array';
                }
                return item;
            });
            if (and === null || and === glue) {
                return safeValue.join(glue);
            }
            if (safeValue.length === 1) {
                return safeValue[0];
            }
            return safeValue.slice(0, -1).join(glue) + and + safeValue[safeValue.length - 1];
        }
        return '';
    };
    return Promise.resolve(_do());
};
exports.join = join;
const joinSynchronously = (_executionContext, value, glue, and) => {
    if ((value == null) || (value === undefined)) {
        return '';
    }
    if ((0, is_traversable_1.isTraversable)(value)) {
        value = (0, iterator_to_array_1.iteratorToArray)(value);
        // this is ugly, but we have to ensure that each element of the array is rendered as PHP would render it
        const safeValue = value.map((item) => {
            if (typeof item === 'boolean') {
                return (item === true) ? '1' : '';
            }
            if (Array.isArray(item)) {
                return 'Array';
            }
            return item;
        });
        if (and === null || and === glue) {
            return safeValue.join(glue);
        }
        if (safeValue.length === 1) {
            return safeValue[0];
        }
        return safeValue.slice(0, -1).join(glue) + and + safeValue[safeValue.length - 1];
    }
    return '';
};
exports.joinSynchronously = joinSynchronously;
