"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trimSynchronously = exports.trim = void 0;
const phpTrim = require('locutus/php/strings/trim');
const phpLeftTrim = require('locutus/php/strings/ltrim');
const phpRightTrim = require('locutus/php/strings/rtrim');
/**
 * Returns a trimmed string.
 *
 * @returns {Promise<string>}
 *
 * @throws TwingErrorRuntime When an invalid trimming side is used (not a string or not 'left', 'right', or 'both')
 */
const trim = (_executionContext, string, characterMask, side) => {
    const _do = () => {
        if (string === null) {
            return null;
        }
        if (characterMask === null) {
            characterMask = " \t\n\r\0\x0B";
        }
        switch (side) {
            case 'both':
                return phpTrim(string, characterMask);
            case 'left':
                return phpLeftTrim(string, characterMask);
            case 'right':
                return phpRightTrim(string, characterMask);
            default:
                throw new Error('Trimming side must be "left", "right" or "both".');
        }
    };
    try {
        return Promise.resolve(_do());
    }
    catch (error) {
        return Promise.reject(error);
    }
};
exports.trim = trim;
const trimSynchronously = (_executionContext, string, characterMask, side) => {
    if (string === null) {
        return null;
    }
    if (characterMask === null) {
        characterMask = " \t\n\r\0\x0B";
    }
    switch (side) {
        case 'both':
            return phpTrim(string, characterMask);
        case 'left':
            return phpLeftTrim(string, characterMask);
        case 'right':
            return phpRightTrim(string, characterMask);
        default:
            throw new Error('Trimming side must be "left", "right" or "both".');
    }
};
exports.trimSynchronously = trimSynchronously;
