"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.roundSynchronously = exports.round = void 0;
const phpRound = require('locutus/php/math/round');
const phpCeil = require('locutus/php/math/ceil');
const phpFloor = require('locutus/php/math/floor');
/**
 * Rounds a number.
 *
 * @param value The value to round
 * @param {number} precision The rounding precision
 * @param {string} method The method to use for rounding
 *
 * @returns {Promise<number>} The rounded number
 */
const round = (_executionContext, value, precision, method) => {
    const _do = () => {
        if (method === 'common') {
            return phpRound(value, precision);
        }
        if (method !== 'ceil' && method !== 'floor') {
            throw new Error('The round filter only supports the "common", "ceil", and "floor" methods.');
        }
        const intermediateValue = value * Math.pow(10, precision);
        const intermediateDivider = Math.pow(10, precision);
        if (method === 'ceil') {
            return phpCeil(intermediateValue) / intermediateDivider;
        }
        else {
            return phpFloor(intermediateValue) / intermediateDivider;
        }
    };
    try {
        const result = _do();
        return Promise.resolve(result);
    }
    catch (error) {
        return Promise.reject(error);
    }
};
exports.round = round;
const roundSynchronously = (_executionContext, value, precision, method) => {
    if (method === 'common') {
        return phpRound(value, precision);
    }
    if (method !== 'ceil' && method !== 'floor') {
        throw new Error('The round filter only supports the "common", "ceil", and "floor" methods.');
    }
    const intermediateValue = value * Math.pow(10, precision);
    const intermediateDivider = Math.pow(10, precision);
    if (method === 'ceil') {
        return phpCeil(intermediateValue) / intermediateDivider;
    }
    else {
        return phpFloor(intermediateValue) / intermediateDivider;
    }
};
exports.roundSynchronously = roundSynchronously;
