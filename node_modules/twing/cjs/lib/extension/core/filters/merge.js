"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeSynchronously = exports.merge = void 0;
const merge_iterables_1 = require("../../../helpers/merge-iterables");
const is_traversable_1 = require("../../../helpers/is-traversable");
const iterator_to_map_1 = require("../../../helpers/iterator-to-map");
/**
 * Merges an array with another one.
 *
 * <pre>
 *  {% set items = { 'apple': 'fruit', 'orange': 'fruit' } %}
 *
 *  {% set items = items|merge({ 'peugeot': 'car' }) %}
 *
 *  {# items now contains { 'apple': 'fruit', 'orange': 'fruit', 'peugeot': 'car' } #}
 * </pre>
 *
 * @param {any} iterable1 An iterable
 * @param {any} source An iterable
 *
 * @return {Promise<Map<any, any>>} The merged map
 */
const merge = (_executionContext, iterable1, source) => {
    const isIterable1NullOrUndefined = (iterable1 === null) || (iterable1 === undefined);
    if (isIterable1NullOrUndefined || (!(0, is_traversable_1.isTraversable)(iterable1) && (typeof iterable1 !== 'object'))) {
        return Promise.reject(new Error(`The merge filter only works on arrays or "Traversable", got "${!isIterable1NullOrUndefined ? typeof iterable1 : iterable1}".`));
    }
    const isSourceNullOrUndefined = (source === null) || (source === undefined);
    if (isSourceNullOrUndefined || (!(0, is_traversable_1.isTraversable)(source) && (typeof source !== 'object'))) {
        return Promise.reject(new Error(`The merge filter only accepts arrays or "Traversable" as source, got "${!isSourceNullOrUndefined ? typeof source : source}".`));
    }
    return Promise.resolve((0, merge_iterables_1.mergeIterables)((0, iterator_to_map_1.iteratorToMap)(iterable1), (0, iterator_to_map_1.iteratorToMap)(source)));
};
exports.merge = merge;
const mergeSynchronously = (_executionContext, iterable1, source) => {
    const isIterable1NullOrUndefined = (iterable1 === null) || (iterable1 === undefined);
    if (isIterable1NullOrUndefined || (!(0, is_traversable_1.isTraversable)(iterable1) && (typeof iterable1 !== 'object'))) {
        throw new Error(`The merge filter only works on arrays or "Traversable", got "${!isIterable1NullOrUndefined ? typeof iterable1 : iterable1}".`);
    }
    const isSourceNullOrUndefined = (source === null) || (source === undefined);
    if (isSourceNullOrUndefined || (!(0, is_traversable_1.isTraversable)(source) && (typeof source !== 'object'))) {
        throw new Error(`The merge filter only accepts arrays or "Traversable" as source, got "${!isSourceNullOrUndefined ? typeof source : source}".`);
    }
    return (0, merge_iterables_1.mergeIterables)((0, iterator_to_map_1.iteratorToMap)(iterable1), (0, iterator_to_map_1.iteratorToMap)(source));
};
exports.mergeSynchronously = mergeSynchronously;
