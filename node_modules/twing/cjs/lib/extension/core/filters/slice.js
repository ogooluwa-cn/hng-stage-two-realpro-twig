"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sliceSynchronously = exports.slice = void 0;
const is_traversable_1 = require("../../../helpers/is-traversable");
const iterator_to_map_1 = require("../../../helpers/iterator-to-map");
const slice_map_1 = require("../../../helpers/slice-map");
/**
 * Slices a variable.
 *
 * @param _executionContext
 * @param item A variable
 * @param start Start of the slice
 * @param length Size of the slice
 * @param preserveKeys Whether to preserve key or not (when the input is an object)
 *
 * @returns {Promise<string | Map<any, any>>} The sliced variable
 */
const slice = (_executionContext, item, start, length, preserveKeys) => {
    if ((0, is_traversable_1.isTraversable)(item)) {
        const iterableItem = (0, iterator_to_map_1.iteratorToMap)(item);
        if (length === null) {
            length = iterableItem.size - start;
        }
        return Promise.resolve((0, slice_map_1.sliceMap)(iterableItem, start, length, preserveKeys));
    }
    item = '' + (item ? item : '');
    if (length === null) {
        length = item.length - start;
    }
    return Promise.resolve(item.substr(start, length));
};
exports.slice = slice;
const sliceSynchronously = (_executionContext, item, start, length, preserveKeys) => {
    if ((0, is_traversable_1.isTraversable)(item)) {
        const iterableItem = (0, iterator_to_map_1.iteratorToMap)(item);
        if (length === null) {
            length = iterableItem.size - start;
        }
        return (0, slice_map_1.sliceMap)(iterableItem, start, length, preserveKeys);
    }
    item = '' + (item ? item : '');
    if (length === null) {
        length = item.length - start;
    }
    return item.substr(start, length);
};
exports.sliceSynchronously = sliceSynchronously;
