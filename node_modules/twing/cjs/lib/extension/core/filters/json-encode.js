"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonEncodeSynchronously = exports.jsonEncode = void 0;
const iterator_to_hash_1 = require("../../../helpers/iterator-to-hash");
const iterator_to_array_1 = require("../../../helpers/iterator-to-array");
const is_plain_object_1 = require("../../../helpers/is-plain-object");
const iterator_to_map_1 = require("../../../helpers/iterator-to-map");
const is_traversable_1 = require("../../../helpers/is-traversable");
function isPureArray(map) {
    let result = true;
    let keys = Array.from(map.keys());
    let i = 0;
    while (result && (i < keys.length)) {
        let key = keys[i];
        result = (Number(key) === i);
        i++;
    }
    return result;
}
const jsonEncode = (_executionContext, value) => {
    const _sanitize = (value) => {
        if ((0, is_traversable_1.isTraversable)(value) || (0, is_plain_object_1.isPlainObject)(value)) {
            value = (0, iterator_to_map_1.iteratorToMap)(value);
        }
        if (value instanceof Map) {
            let sanitizedValue;
            if (isPureArray(value)) {
                value = (0, iterator_to_array_1.iteratorToArray)(value);
                sanitizedValue = [];
                for (const key in value) {
                    sanitizedValue.push(_sanitize(value[key]));
                }
            }
            else {
                value = (0, iterator_to_hash_1.iteratorToHash)(value);
                sanitizedValue = {};
                for (let key in value) {
                    sanitizedValue[key] = _sanitize(value[key]);
                }
            }
            value = sanitizedValue;
        }
        return value;
    };
    return Promise.resolve(JSON.stringify(_sanitize(value)));
};
exports.jsonEncode = jsonEncode;
const jsonEncodeSynchronously = (_executionContext, value) => {
    const _sanitize = (value) => {
        if ((0, is_traversable_1.isTraversable)(value) || (0, is_plain_object_1.isPlainObject)(value)) {
            value = (0, iterator_to_map_1.iteratorToMap)(value);
        }
        if (value instanceof Map) {
            let sanitizedValue;
            if (isPureArray(value)) {
                value = (0, iterator_to_array_1.iteratorToArray)(value);
                sanitizedValue = [];
                for (const key in value) {
                    sanitizedValue.push(_sanitize(value[key]));
                }
            }
            else {
                value = (0, iterator_to_hash_1.iteratorToHash)(value);
                sanitizedValue = {};
                for (let key in value) {
                    sanitizedValue[key] = _sanitize(value[key]);
                }
            }
            value = sanitizedValue;
        }
        return value;
    };
    return JSON.stringify(_sanitize(value));
};
exports.jsonEncodeSynchronously = jsonEncodeSynchronously;
