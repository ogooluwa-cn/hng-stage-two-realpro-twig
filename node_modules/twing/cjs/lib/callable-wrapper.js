"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSynchronousCallableWrapper = exports.createCallableWrapper = void 0;
const createCallableWrapper = (name, callable, acceptedArguments, options) => {
    let nativeArguments = [];
    const callableWrapper = {
        get callable() {
            return callable;
        },
        get name() {
            return name;
        },
        get acceptedArguments() {
            return acceptedArguments;
        },
        get alternative() {
            return options.alternative;
        },
        get deprecatedVersion() {
            return options.deprecated;
        },
        get isDeprecated() {
            return options.deprecated ? true : false;
        },
        get isVariadic() {
            return options.is_variadic || false;
        },
        get nativeArguments() {
            return nativeArguments;
        },
        set nativeArguments(values) {
            nativeArguments = values;
        }
    };
    return callableWrapper;
};
exports.createCallableWrapper = createCallableWrapper;
const createSynchronousCallableWrapper = (name, callable, acceptedArguments, options) => {
    let nativeArguments = [];
    const callableWrapper = {
        get callable() {
            return callable;
        },
        get name() {
            return name;
        },
        get acceptedArguments() {
            return acceptedArguments;
        },
        get alternative() {
            return options.alternative;
        },
        get deprecatedVersion() {
            return options.deprecated;
        },
        get isDeprecated() {
            return options.deprecated ? true : false;
        },
        get isVariadic() {
            return options.is_variadic || false;
        },
        get nativeArguments() {
            return nativeArguments;
        },
        set nativeArguments(values) {
            nativeArguments = values;
        }
    };
    return callableWrapper;
};
exports.createSynchronousCallableWrapper = createSynchronousCallableWrapper;
